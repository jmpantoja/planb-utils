<?php

// acepta cualquier tipo
$vector = Vector::make([]);

// todos los valores del tipo especificado
$vector = Vector::typed($type, []);

//pide que todos los valores sean del mismo tipo que el primero
$vector = Vector::like([]);


$resolver = Resolver::make()
                // para capturar y tratar arrays, o objetos que se han de tratar de forma especial
                // por ejemplo, si quiero hacer una carga recursiva, o tratar por separado cada elemento de un array
                ->preload($type. function(){}): void

                // repetir estos dos pasos las veces que haga falta
                // es decir, el valor devuelto por convert, vuelve a pasar por filter
                // se hace de forma silenciosa, sin lanzar excepciones
                // cuidarnos de las referencias circulares

                ->filter(function(){})              //boolean
                ->convert($type, function(){})      //mixed

                //llegados a este punto todos los valores deben ser del tipo correcto,
                // se lanza una excepciÃ³n en caso contrario
                ->assertType()

                //Como puede que el tipo sea correcto, pero el valor no, aqui se controla
                ->validate(function(){})            //boolean (lanza excepciones)
                ->normalize(function(){})           //mixed




$resolver->resolve($value);
$resolver->load(iterable $values);


interface Value

class NormalizedValue implements Value

class IgnoreValue implements Value

class FailedValue implements Value




class Vector implements Collection, ArrayAccess, Countable, etc

    /** \DS\Vector
    private $items;


    public function bind(Resolver $resolver){
        $this->customize($resolver);

        $resolver->addPreloader([$this, 'preload']);
        $resolver->addFilter([$this, 'filter']);
        $resolver->addConverter([$this, 'convert']);
        $resolver->addNormalizer([$this, 'normalize']);
        $resolver->addValidator([$this, 'validate']);

        $this->resolver = $resolver;
    }


    public function resolver(): Resolver
    {
        if(is_null($this->resolver)){
            $resolver = Resolver::make();
            $this->bind($resolver)
        }

        return $this->resolver;
    }

    public function resolve($value){
        return $this->resolver()
            ->resolve($value)
    }


    public function addPreloader($type. function(){}, $priority);

    public function addFilter(function(){}, $priority);

    public function addConverter($type. function(){}, $priority);

    public function addNormalizer(function(){}, $priority);

    public function addValidator(function(){}, $priority);
